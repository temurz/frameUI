//
//  ChatInteractor.swift
//  Tedr
//
//  Created by Kostya Lee on 11/06/25.
//

import Foundation
final class ChatInteractor: PresenterToInteractorChatProtocol {
    weak var presenter: InteractorToPresenterChatProtocol?

    func fetchMessages() {
        let mockMessages: [ChatMessageRow] = [
            ChatMessageRow(
                id: "13",
                senderId: "user1",
                date: Date(),
                isIncoming: true,
                content: .transaction(TransactionContent(
                    amount: 50.00,
                    currency: "USD",
                    coinImageName: "ustt_icon_colored",
                    token: "ETH",
                    isLocked: false,
                    statusText: "Completed",
                    unlockTimeLeft: nil
                )),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "14",
                senderId: "me",
                date: Date(),
                isIncoming: false,
                content: .transaction(TransactionContent(
                    amount: 1299.15,
                    currency: "USD",
                    coinImageName: "ustt_icon_colored",
                    token: "ETH",
                    isLocked: true,
                    statusText: "Tap to unlock",
                    unlockTimeLeft: 12000
                )),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "15",
                senderId: "user1",
                date: Date(),
                isIncoming: true,
                content: .transaction(TransactionContent(
                    amount: 320.00,
                    currency: "USD",
                    coinImageName: "ustt_icon_colored",
                    token: "BTC",
                    isLocked: false,
                    statusText: "Failed",
                    unlockTimeLeft: nil
                )),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "1",
                senderId: "user1",
                date: Date(),
                isIncoming: true,
                content: .text(TextContent(text: "–ü—Ä–∏–≤–µ—Ç!", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "2",
                senderId: "me",
                date: Date(),
                isIncoming: false,
                content: .text(TextContent(text: "–•–µ–π, –∫–∞–∫ –¥–µ–ª–∞?", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "3",
                senderId: "me",
                date: Date(),
                isIncoming: false,
                content: .text(TextContent(text: "I wanna go to the mountains. But I'm short on funds ü§® Give me money!", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "4",
                senderId: "user1",
                date: Date(),
                isIncoming: true,
                content: .text(TextContent(text: "üòÇüòÇüòÇ", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "5",
                senderId: "user1",
                date: Date(),
                isIncoming: true,
                content: .text(TextContent(text: "–í –ø—è—Ç–Ω–∏—Ü—É —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –∫–æ—Ñ–µ, —Ç—ã —Å –Ω–∞–º–∏?", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "6",
                senderId: "me",
                date: Date(),
                isIncoming: false,
                content: .text(TextContent(text: "–î–∞, –¥–∞–≤–∞–π! –ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "7",
                senderId: "user1",
                date: Date(),
                isIncoming: true,
                content: .text(TextContent(text: "–¢–æ—Ç –∂–µ Spazio –Ω–∞ –¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–π –≤ 18:00", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "8",
                senderId: "me",
                date: Date(),
                isIncoming: false,
                content: .text(TextContent(text: "–û–∫–µ–π, –±—É–¥—É ‚úåÔ∏è", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "9",
                senderId: "user1",
                date: Date(),
                isIncoming: true,
                content: .text(TextContent(text: "–ê —Ç—ã —á—Ç–æ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–µ–ª–∞–ª?", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "10",
                senderId: "me",
                date: Date(),
                isIncoming: false,
                content: .text(TextContent(text: "–°—ä–µ–∑–¥–∏–ª–∏ –≤ –≥–æ—Ä—ã —Å —Ä–µ–±—è—Ç–∞–º–∏. –ë—ã–ª–æ –∫—Ä—É—Ç–æ, –ø—Ä–∏—Ä–æ–¥–∞, –∫–æ—Å—Ç—ë—Ä, –≥–∏—Ç–∞—Ä–∞, –≤—Å—ë –∫–∞–∫ –Ω–∞–¥–æ.", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "11",
                senderId: "user1",
                date: Date(),
                isIncoming: true,
                content: .text(TextContent(text: "–ó–≤—É—á–∏—Ç –∫–∞–∫ –º–µ—á—Ç–∞ üòç", attachments: [])),
                replyTo: nil
            ),
            ChatMessageRow(
                id: "12",
                senderId: "me",
                date: Date(),
                isIncoming: false,
                content: .text(TextContent(text: "–í–æ—Ç –æ–¥–Ω–∞ ‚Äî –∑–∞–∫–∞—Ç –Ω–∞–¥ –≤–µ—Ä—à–∏–Ω–∞–º–∏ üåÑ", attachments: [])),
                replyTo: nil
            )
        ]
        
        presenter?.didFetchMessages(mockMessages)
    }
}
